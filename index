<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RealTalk - Language Learning</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            height: 100vh;
            background: linear-gradient(135deg, 
                rgba(0, 0, 0, 0.3) 0%, 
                rgba(255, 206, 84, 0.3) 35%, 
                rgba(221, 0, 0, 0.3) 70%, 
                rgba(0, 0, 0, 0.3) 100%);
            background-attachment: fixed;
            display: flex;
            flex-direction: column;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 15px 20px;
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(10px);
            border-bottom: 1px solid rgba(255, 255, 255, 0.2);
            position: relative;
        }

        .left-controls {
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 180px;
        }

        .branding {
            position: absolute;
            left: 50%;
            top: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
        }

        .logo {
            font-size: 32px;
            font-weight: 900;
            color: #DD0000;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.3);
            letter-spacing: -1px;
            margin-bottom: 2px;
        }

        .tagline {
            font-size: 16px;
            font-weight: 600;
            color: #FFCE54;
            text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.4);
            letter-spacing: 0.5px;
        }

        .right-controls {
            display: flex;
            align-items: center;
            gap: 15px;
            min-width: 180px;
            justify-content: flex-end;
        }

        .flag {
            width: 40px;
            height: 26px;
            border-radius: 4px;
            box-shadow: 0 2px 8px rgba(0,0,0,0.3);
            background: linear-gradient(to bottom, 
                #000 33.33%, 
                #FFCE54 33.33% 66.66%, 
                #DD0000 66.66%);
        }

        .speed-control {
            display: flex;
            align-items: center;
            gap: 10px;
            background: rgba(255, 255, 255, 0.15);
            padding: 8px 15px;
            border-radius: 20px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.2);
        }

        .speed-label {
            font-size: 12px;
            font-weight: 500;
            color: #333;
            white-space: nowrap;
        }

        .speed-slider {
            width: 80px;
            height: 4px;
            background: rgba(255, 255, 255, 0.3);
            border-radius: 2px;
            outline: none;
            cursor: pointer;
            -webkit-appearance: none;
        }

        .speed-slider::-webkit-slider-thumb {
            -webkit-appearance: none;
            width: 16px;
            height: 16px;
            background: #007AFF;
            border-radius: 50%;
            cursor: pointer;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
        }

        .speed-value {
            font-size: 12px;
            font-weight: 600;
            color: #007AFF;
            min-width: 30px;
            text-align: center;
        }

        .settings-btn {
            background: none;
            border: none;
            font-size: 20px;
            cursor: pointer;
            color: #666;
            padding: 5px;
            border-radius: 50%;
            transition: background 0.2s;
        }

        .settings-btn:hover {
            background: rgba(255, 255, 255, 0.2);
        }

        .conversation-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            max-width: 800px;
            margin: 20px auto;
            padding: 0 20px;
            width: 100%;
        }

        .conversation-window {
            flex: 1;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 20px;
            padding: 30px;
            margin-bottom: 20px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255, 255, 255, 0.3);
            overflow-y: auto;
            min-height: 400px;
        }

        @media (prefers-color-scheme: dark) {
            .conversation-window {
                background: rgba(30, 30, 30, 0.95);
                color: #fff;
                border: 1px solid rgba(255, 255, 255, 0.1);
            }
            
            .speed-label {
                color: #fff;
            }

            .speed-control {
                background: rgba(0, 0, 0, 0.3);
                border: 1px solid rgba(255, 255, 255, 0.1);
            }

            .settings-btn {
                color: #fff;
            }

            .logo {
                color: #FF4444;
                text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
            }

            .tagline {
                color: #FFD700;
                text-shadow: 1px 1px 3px rgba(0, 0, 0, 0.6);
            }
        }

        .message {
            margin-bottom: 20px;
            padding: 15px 20px;
            border-radius: 18px;
            max-width: 80%;
            word-wrap: break-word;
            animation: slideIn 0.3s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .user-message {
            background: #007AFF;
            color: white;
            margin-left: auto;
            text-align: right;
        }

        .ais-message {
            background: #F1F1F1;
            color: #333;
            margin-right: auto;
        }

        @media (prefers-color-scheme: dark) {
            .ais-message {
                background: #2C2C2E;
                color: #fff;
            }
        }

        .target-language {
            font-size: 16px;
            font-weight: 500;
            line-height: 1.4;
            margin-bottom: 8px;
        }

        .translation {
            font-size: 14px;
            opacity: 0.7;
            font-style: italic;
            line-height: 1.3;
        }

        .voice-controls {
            display: flex;
            justify-content: center;
            gap: 15px;
            padding: 20px;
        }

        .listen-btn {
            background: #34C759;
            color: white;
            border: none;
            padding: 20px 30px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(52, 199, 89, 0.3);
            min-width: 120px;
        }

        .listen-btn:hover {
            background: #28A745;
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(52, 199, 89, 0.4);
        }

        .listen-btn.listening {
            background: #FF3B30;
            animation: pulse 1.5s infinite;
        }

        .listen-btn:disabled {
            background: #999;
            cursor: not-allowed;
            transform: none;
        }

        @keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .grammar-btn {
            background: rgba(255, 206, 84, 0.9);
            color: #333;
            border: none;
            padding: 20px 25px;
            border-radius: 50px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(255, 206, 84, 0.3);
        }

        .grammar-btn:hover {
            background: rgba(255, 206, 84, 1);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(255, 206, 84, 0.4);
        }

        .listening-indicator {
            text-align: center;
            padding: 10px;
            color: #666;
            font-style: italic;
            display: none;
        }

        .listening-indicator.active {
            display: block;
        }

        .message.loading .target-language:after {
            content: "...";
            animation: dots 1.5s infinite;
        }

        @keyframes dots {
            0%, 20% { content: "..."; }
            40% { content: ".."; }
            60% { content: "."; }
            80%, 100% { content: "..."; }
        }

        .welcome-message {
            text-align: center;
            color: #666;
            font-style: italic;
            padding: 40px 20px;
        }

        .error-message {
            background: #FF3B30;
            color: white;
            padding: 10px 15px;
            border-radius: 10px;
            margin: 10px 0;
            font-size: 14px;
        }

        .success-message {
            background: #34C759;
            color: white;
            padding: 10px 15px;
            border-radius: 10px;
            margin: 10px 0;
            font-size: 14px;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                gap: 10px;
                padding: 15px 20px 20px;
            }

            .left-controls, .right-controls {
                position: static;
                min-width: auto;
                justify-content: center;
            }

            .branding {
                position: static;
                transform: none;
                order: -1;
                margin-bottom: 10px;
            }

            .logo {
                font-size: 28px;
            }

            .tagline {
                font-size: 14px;
            }

            .conversation-container {
                margin: 10px auto;
                padding: 0 15px;
            }
            
            .conversation-window {
                padding: 20px;
            }
            
            .message {
                max-width: 90%;
            }

            .voice-controls {
                flex-direction: column;
                align-items: center;
            }

            .listen-btn, .grammar-btn {
                width: 100%;
                max-width: 280px;
            }
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="left-controls">
            <div class="speed-control">
                <span class="speed-label">AIS Speed:</span>
                <input type="range" class="speed-slider" id="speedSlider" min="0.5" max="2" step="0.1" value="1">
                <span class="speed-value" id="speedValue">1.0x</span>
            </div>
        </div>

        <div class="branding">
            <div class="logo">RealTalk</div>
            <div class="tagline">Language Learning for Real Life</div>
        </div>

        <div class="right-controls">
            <button class="settings-btn">⚙️</button>
            <div class="flag" title="German"></div>
        </div>
    </div>

    <div class="conversation-container">
        <div class="conversation-window" id="conversationWindow">
            <div class="welcome-message">
                🎤 Click "Start Talking" to begin your German conversation with AIS<br>
                <small>(Grant microphone permission when prompted)</small>
            </div>
        </div>

        <div class="listening-indicator" id="listeningIndicator">
            🎙️ Listening... speak naturally and AIS will respond when you're done
        </div>

        <div class="voice-controls">
            <button class="listen-btn" id="listenBtn">🎤 Start Talking</button>
            <button class="grammar-btn" id="grammarBtn">Explain Grammar</button>
        </div>
    </div>

    <script>
        // Configuration - UPDATE THIS WITH YOUR LATEST DEPLOYMENT URL
        const CONFIG = {
            BACKEND_URL: 'https://script.google.com/macros/s/AKfycbz5Fxpj7mxZ7Nd9TLbprHKYmeIdHYnKTVDfJX_v986rFn7GEO69ChHt271n7Pq9OLDq/exec',
            CURRENT_LANGUAGE: 'German',
            USER_ID: 'user_' + Math.random().toString(36).substr(2, 9)
        };

        let isListening = false;
        let recognition;
        let speechSynthesis = window.speechSynthesis;
        let currentSpeechRate = 1.0;
        let lastGrammarExplanation = '';

        const listenBtn = document.getElementById('listenBtn');
        const grammarBtn = document.getElementById('grammarBtn');
        const listeningIndicator = document.getElementById('listeningIndicator');
        const conversationWindow = document.getElementById('conversationWindow');
        const speedSlider = document.getElementById('speedSlider');
        const speedValue = document.getElementById('speedValue');

        speedSlider.addEventListener('input', function() {
            currentSpeechRate = parseFloat(this.value);
            speedValue.textContent = currentSpeechRate.toFixed(1) + 'x';
            if (speechSynthesis.speaking) {
                speechSynthesis.cancel();
            }
        });

        function initializeSpeechRecognition() {
            if ('webkitSpeechRecognition' in window && !recognition) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'de-DE';
                
                recognition.onstart = function() {
                    isListening = true;
                    listenBtn.textContent = '🔴 Listening...';
                    listenBtn.classList.add('listening');
                    listeningIndicator.classList.add('active');
                };
                
                recognition.onend = function() {
                    isListening = false;
                    listenBtn.textContent = '🎤 Start Talking';
                    listenBtn.classList.remove('listening');
                    listeningIndicator.classList.remove('active');
                };
                
                recognition.onresult = function(event) {
                    let finalTranscript = '';
                    for (let i = 0; i < event.results.length; i++) {
                        if (event.results[i].isFinal) {
                            finalTranscript += event.results[i][0].transcript;
                        }
                    }
                    
                    if (finalTranscript.trim()) {
                        processUserInput(finalTranscript.trim());
                    }
                };

                recognition.onerror = function(event) {
                    console.error('Speech recognition error:', event.error);
                    addErrorMessage('Speech recognition error: ' + event.error);
                    isListening = false;
                    listenBtn.textContent = '🎤 Start Talking';
                    listenBtn.classList.remove('listening');
                    listeningIndicator.classList.remove('active');
                };
            }
        }

        listenBtn.addEventListener('click', function() {
            if (!recognition) {
                initializeSpeechRecognition();
            }
            
            if (isListening) {
                recognition.stop();
            } else {
                if (recognition) {
                    recognition.start();
                } else {
                    alert('Voice recognition not supported. Please use Chrome or Safari.');
                }
            }
        });

        grammarBtn.addEventListener('click', function() {
            if (lastGrammarExplanation) {
                alert('Grammar Explanation:\n\n' + lastGrammarExplanation);
            } else {
                alert('No recent grammar explanations available.');
            }
        });

        async function processUserInput(userInput) {
            try {
                addUserMessage(userInput);
                const loadingId = addAISMessage('', '', true);
                listenBtn.disabled = true;
                
                const response = await callBackend(userInput);
                
                const loadingElement = document.getElementById(loadingId);
                if (loadingElement) {
                    loadingElement.remove();
                }
                
                if (response && response.success) {
                    addAISMessage(
                        response.response.targetLanguage,
                        response.response.translation
                    );
                    
                    if (response.response.grammarExplanation) {
                        lastGrammarExplanation = response.response.grammarExplanation;
                    }
                    
                    speakGerman(response.response.targetLanguage);
                } else {
                    addErrorMessage('Backend error: ' + (response ? response.error : 'No response'));
                    addAISMessage(
                        'Entschuldigung, ich habe ein technisches Problem.',
                        '(Sorry, I\'m having a technical issue.)'
                    );
                }
                
            } catch (error) {
                console.error('Error:', error);
                addErrorMessage('Connection error: ' + error.message);
            } finally {
                listenBtn.disabled = false;
            }
        }

        async function callBackend(userInput) {
            const payload = {
                action: 'conversation',
                userId: CONFIG.USER_ID,
                userInput: userInput,
                language: CONFIG.CURRENT_LANGUAGE
            };

            const response = await fetch(CONFIG.BACKEND_URL, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const data = await response.json();
            return data.data;
        }

        function addUserMessage(text) {
            const message = document.createElement('div');
            message.className = 'message user-message';
            message.innerHTML = `
                <div class="target-language">${text}</div>
                <div class="translation">(You said in German)</div>
            `;
            conversationWindow.appendChild(message);
            scrollToBottom();
            
            const welcome = conversationWindow.querySelector('.welcome-message');
            if (welcome) welcome.remove();
        }

        function addAISMessage(germanText, englishTranslation, loading = false) {
            const messageId = 'msg_' + Date.now();
            const message = document.createElement('div');
            message.className = 'message ais-message' + (loading ? ' loading' : '');
            message.id = messageId;
            
            if (loading) {
                message.innerHTML = `
                    <div class="target-language">AIS is thinking</div>
                    <div class="translation">(Generating response...)</div>
                `;
            } else {
                message.innerHTML = `
                    <div class="target-language">${germanText}</div>
                    <div class="translation">${englishTranslation}</div>
                `;
            }
            
            conversationWindow.appendChild(message);
            scrollToBottom();
            return messageId;
        }

        function addErrorMessage(errorText) {
            const errorDiv = document.createElement('div');
            errorDiv.className = 'error-message';
            errorDiv.textContent = '⚠️ ' + errorText;
            conversationWindow.appendChild(errorDiv);
            scrollToBottom();
            
            setTimeout(() => {
                if (errorDiv.parentNode) {
                    errorDiv.parentNode.removeChild(errorDiv);
                }
            }, 5000);
        }

        function speakGerman(text) {
            speechSynthesis.cancel();
            
            const utterance = new SpeechSynthesisUtterance(text);
            utterance.lang = 'de-DE';
            utterance.rate = currentSpeechRate;
            utterance.pitch = 1.0;
            utterance.volume = 1.0;
            
            setTimeout(() => {
                speechSynthesis.speak(utterance);
            }, 100);
        }

        function scrollToBottom() {
            conversationWindow.scrollTop = conversationWindow.scrollHeight;
        }

        console.log('RealTalk initialized');
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RealTalk - Debug Test</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background: linear-gradient(45deg, #f0f0f0, #e0e0e0);
            min-height: 100vh;
        }
        
        .header {
            text-align: center;
            padding: 20px;
            background: rgba(221, 0, 0, 0.1);
            border-radius: 10px;
            margin-bottom: 20px;
        }
        
        .logo {
            font-size: 32px;
            font-weight: bold;
            color: #DD0000;
            margin-bottom: 10px;
        }
        
        .tagline {
            font-size: 16px;
            color: #666;
        }
        
        .container {
            max-width: 800px;
            margin: 0 auto;
            padding: 20px;
            background: white;
            border-radius: 10px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }
        
        .test-section {
            margin: 20px 0;
            padding: 15px;
            border: 1px solid #ddd;
            border-radius: 5px;
        }
        
        button {
            background: #34C759;
            color: white;
            border: none;
            padding: 15px 30px;
            border-radius: 25px;
            cursor: pointer;
            font-size: 16px;
            margin: 10px;
        }
        
        button:hover {
            background: #28A745;
        }
        
        .status {
            margin: 10px 0;
            padding: 10px;
            border-radius: 5px;
            font-weight: bold;
        }
        
        .success {
            background: #d4edda;
            color: #155724;
        }
        
        .error {
            background: #f8d7da;
            color: #721c24;
        }
        
        .info {
            background: #cce5ff;
            color: #004085;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">RealTalk</div>
        <div class="tagline">Language Learning for Real Life</div>
    </div>

    <div class="container">
        <h2>Debug Test Page</h2>
        
        <div class="test-section">
            <h3>1. Page Loading Test</h3>
            <div id="pageStatus" class="status info">Page loaded successfully! âœ…</div>
        </div>
        
        <div class="test-section">
            <h3>2. Backend Connection Test</h3>
            <button onclick="testBackend()">Test Backend</button>
            <div id="backendStatus" class="status info">Click button to test backend connection</div>
        </div>
        
        <div class="test-section">
            <h3>3. Speech Recognition Test</h3>
            <button onclick="testSpeech()">Test Speech</button>
            <div id="speechStatus" class="status info">Click button to test microphone</div>
        </div>
        
        <div class="test-section">
            <h3>4. Full Conversation Test</h3>
            <button onclick="testConversation()">Start German Conversation</button>
            <div id="conversationStatus" class="status info">Click button to start talking in German</div>
            <div id="conversationOutput" style="margin-top: 10px; padding: 10px; background: #f8f9fa; border-radius: 5px; min-height: 100px;">
                <strong>Conversation will appear here...</strong>
            </div>
        </div>
        
        <div class="test-section">
            <h3>Debug Info</h3>
            <div id="debugInfo" style="font-family: monospace; font-size: 12px; background: #f8f9fa; padding: 10px; border-radius: 5px;">
                Loading debug information...
            </div>
        </div>
    </div>

    <script>
        console.log('=== RealTalk Debug Test Starting ===');
        
        // Configuration
        const CONFIG = {
            BACKEND_URL: 'https://script.google.com/macros/s/AKfycbziv3gYkiEz4-XytvSvOhHnRIvgtlNWjO2K02ZPw40gHlNJBDMkUgAAj3Pm2MHU2Blp/exec',
            CURRENT_LANGUAGE: 'German',
            USER_ID: 'debug_user_' + Math.random().toString(36).substr(2, 9)
        };
        
        let recognition;
        
        // Update debug info
        function updateDebugInfo() {
            const info = document.getElementById('debugInfo');
            const debugData = {
                'Current Time': new Date().toLocaleString(),
                'User ID': CONFIG.USER_ID,
                'Backend URL': CONFIG.BACKEND_URL,
                'Speech Recognition': 'webkitSpeechRecognition' in window ? 'Available' : 'Not Available',
                'Browser': navigator.userAgent.split(')')[0] + ')',
                'Location': window.location.href
            };
            
            let debugHtml = '';
            for (const [key, value] of Object.entries(debugData)) {
                debugHtml += `<strong>${key}:</strong> ${value}<br>`;
            }
            info.innerHTML = debugHtml;
        }
        
        // Test backend connection
        async function testBackend() {
            const status = document.getElementById('backendStatus');
            status.className = 'status info';
            status.textContent = 'Testing backend connection...';
            
            try {
                const payload = {
                    action: 'conversation',
                    userId: CONFIG.USER_ID,
                    userInput: 'Test message',
                    language: 'German'
                };
                
                console.log('Testing backend with payload:', payload);
                
                const response = await fetch(CONFIG.BACKEND_URL, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify(payload)
                });
                
                console.log('Backend response status:', response.status);
                
                if (!response.ok) {
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Backend response data:', data);
                
                if (data.success && data.data && data.data.response) {
                    status.className = 'status success';
                    status.textContent = `Backend working! âœ… Got response: "${data.data.response.targetLanguage}"`;
                } else {
                    status.className = 'status error';
                    status.textContent = `Backend responded but no conversation data: ${JSON.stringify(data)}`;
                }
                
            } catch (error) {
                console.error('Backend test failed:', error);
                status.className = 'status error';
                status.textContent = `Backend failed: ${error.message}`;
            }
        }
        
        // Test speech recognition
        function testSpeech() {
            const status = document.getElementById('speechStatus');
            
            if (!('webkitSpeechRecognition' in window)) {
                status.className = 'status error';
                status.textContent = 'Speech recognition not supported in this browser. Use Chrome or Safari.';
                return;
            }
            
            if (!recognition) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'de-DE';
                
                recognition.onstart = function() {
                    status.className = 'status info';
                    status.textContent = 'ðŸŽ¤ Listening... say something in German';
                };
                
                recognition.onresult = function(event) {
                    const transcript = event.results[0][0].transcript;
                    status.className = 'status success';
                    status.textContent = `âœ… Heard: "${transcript}"`;
                };
                
                recognition.onerror = function(event) {
                    status.className = 'status error';
                    status.textContent = `Speech error: ${event.error}`;
                };
                
                recognition.onend = function() {
                    console.log('Speech recognition ended');
                };
            }
            
            try {
                recognition.start();
            } catch (error) {
                status.className = 'status error';
                status.textContent = `Could not start speech recognition: ${error.message}`;
            }
        }
        
        // Test full conversation
        async function testConversation() {
            const status = document.getElementById('conversationStatus');
            const output = document.getElementById('conversationOutput');
            
            // Test speech first
            if (!('webkitSpeechRecognition' in window)) {
                status.className = 'status error';
                status.textContent = 'Speech recognition not supported. Use Chrome or Safari.';
                return;
            }
            
            if (!recognition) {
                recognition = new webkitSpeechRecognition();
                recognition.continuous = false;
                recognition.interimResults = false;
                recognition.lang = 'de-DE';
                
                recognition.onstart = function() {
                    status.className = 'status info';
                    status.textContent = 'ðŸŽ¤ Listening for German... speak now!';
                };
                
                recognition.onresult = async function(event) {
                    const userInput = event.results[0][0].transcript;
                    
                    // Show user input
                    output.innerHTML += `<div style="margin: 5px 0; padding: 8px; background: #007AFF; color: white; border-radius: 8px; text-align: right;">
                        <strong>You:</strong> ${userInput}
                    </div>`;
                    
                    status.className = 'status info';
                    status.textContent = 'Getting AIS response...';
                    
                    try {
                        // Call backend
                        const payload = {
                            action: 'conversation',
                            userId: CONFIG.USER_ID,
                            userInput: userInput,
                            language: 'German'
                        };
                        
                        const response = await fetch(CONFIG.BACKEND_URL, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                            },
                            body: JSON.stringify(payload)
                        });
                        
                        const data = await response.json();
                        
                        if (data.success && data.data && data.data.response) {
                            const aisResponse = data.data.response;
                            
                            // Show AIS response
                            output.innerHTML += `<div style="margin: 5px 0; padding: 8px; background: #f1f1f1; color: #333; border-radius: 8px;">
                                <strong>AIS:</strong> ${aisResponse.targetLanguage}<br>
                                <small style="opacity: 0.7;"><em>${aisResponse.translation}</em></small>
                            </div>`;
                            
                            // Speak the response
                            const utterance = new SpeechSynthesisUtterance(aisResponse.targetLanguage);
                            utterance.lang = 'de-DE';
                            utterance.rate = 0.9;
                            speechSynthesis.speak(utterance);
                            
                            status.className = 'status success';
                            status.textContent = 'âœ… Conversation successful! Click to continue talking.';
                            
                        } else {
                            throw new Error('No valid response from backend');
                        }
                        
                    } catch (error) {
                        output.innerHTML += `<div style="margin: 5px 0; padding: 8px; background: #ff3b30; color: white; border-radius: 8px;">
                            <strong>Error:</strong> ${error.message}
                        </div>`;
                        
                        status.className = 'status error';
                        status.textContent = 'Conversation failed. Check the error above.';
                    }
                };
                
                recognition.onerror = function(event) {
                    status.className = 'status error';
                    status.textContent = `Speech error: ${event.error}`;
                };
            }
            
            try {
                output.innerHTML = '<strong>Starting conversation...</strong><br><br>';
                recognition.start();
            } catch (error) {
                status.className = 'status error';
                status.textContent = `Could not start: ${error.message}`;
            }
        }
        
        // Initialize page
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Page loaded, initializing...');
            updateDebugInfo();
            
            // Update debug info every 30 seconds
            setInterval(updateDebugInfo, 30000);
        });
        
        console.log('=== RealTalk Debug Test Ready ===');
    </script>
</body>
</html>
